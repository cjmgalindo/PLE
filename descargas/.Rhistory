library(tidyverse)
library(StatsBombR)#1
#Codigo de la competición
Comp <- FreeCompetitions() %>%
filter(competition_id==11 & season_name=="2005/2006")#2
StatsBombData <- free_allevents(MatchesDF = Matches, Parallel = T)#4
#Codigo de la competición
Comp <- FreeCompetitions() %>%
filter(competition_id==11 & season_name=="2005/2006")#2
Matches <- FreeMatches(Comp)#3
StatsBombData <- free_allevents(MatchesDF = Matches, Parallel = T)#4
#Codigo de la competición
Comp <- FreeCompetitions() %>%
filter(competition_id==11 & season_name=="2005/2006")#2
StatsBombData <- free_allevents(MatchesDF = Matches, Parallel = T)#4
Matches <- FreeMatches(Comp)#3
StatsBombData <- free_allevents(MatchesDF = Matches, Parallel = T)#4
StatsBombData = allclean(StatsBombData)#5
#Codigo de la competición
Comp <- FreeCompetitions() %>%
filter(competition_id==42 & season_name=="2018/2019")#2
Matches <- FreeMatches(Comp)#3
#Codigo de la competición
Comp <- FreeCompetitions() %>%
filter(competition_id==42 & season_name=="2018/2019")#2
StatsBombData <- free_allevents(MatchesDF = Matches, Parallel = T)#4
Matches <- FreeMatches(Comp)#3
StatsBombData = allclean(StatsBombData)#5
shots_goals = StatsBombData %>%
group_by(team.name) %>% #1
summarise(shots = sum(type.name=="Shot", na.rm = TRUE),
goals = sum(shot.outcome.name=="Goal", na.rm = TRUE)) #2
Matches <- FreeMatches(Comp)#3
View(StatsBombData)
View(shots_goals)
Matches <- FreeMatches(Comp)#3
View(Comp)
View(FreeCompetitions())
unique(FreeCompetitions()$season_name)
View(FreeCompetitions() %>% filter(competition_id == 42))
#Codigo de la competición
Comp <- FreeCompetitions() %>%
filter(competition_id==42 & season_id=="2018/2019")#2
unique(FreeCompetitions()$season_id)
View(FreeCompetitions() %>% filter(competition_id == 42))
View(Comp)
Matches <- FreeMatches(Comp)#3
View(FreeCompetitions())
#Codigo de la competición
Comp <- FreeCompetitions() %>%
filter(season_name=="2019/2020" & season_id==42)#2
View(FreeCompetitions())
unique(FreeCompetitions()$season_id)
unique(FreeCompetitions()$season_id==42)
View(FreeCompetitions() %>% filter(competition_id == 42))
View(FreeCompetitions() %>% filter(season_name == 42))
View(FreeCompetitions() %>%
filter(season_name =="2019/2020"))
View(Comp)
#Codigo de la competición
Comp <- FreeCompetitions() %>%
filter(season_name=="2019/2020" & competition_id==37)#2
View(Comp)
View(Comp)
Matches <- FreeMatches(Comp)#3
StatsBombData <- free_allevents(MatchesDF = Matches, Parallel = T)#4
StatsBombData = allclean(StatsBombData)#5
shots_goals = StatsBombData %>%
group_by(team.name) %>% #1
summarise(shots = sum(type.name=="Shot", na.rm = TRUE),
goals = sum(shot.outcome.name=="Goal", na.rm = TRUE)) #2
Matches <- FreeMatches(Comp)#3
View(Matches)
View(shots_goals)
write.csv(shots_goals,"C:/Users/John/Downloads/Shots.csv", "shotsGoals.csv", row.names = FALSE)
write.csv(shots_goals,"C:/Users/John/Downloads/shots_goals.csv", "shotsGoals.csv", row.names = FALSE)
write.csv(shots_goals,"shots_goals.csv", "shotsGoals.csv", row.names = FALSE)
View(shots_goals)
dim(shots_goals)  # Muestra el número de filas y columnas
write.csv(shots_goals,"shots_goals.csv", row.names = FALSE)
write.csv(shots_goals,"shots_goals.csv", row.names = FALSE)
write.csv(shots_goals,"C:/Users/John/Downloads/shots_goals.csv", row.names = FALSE)
View(Matches)
View(shots_goals)
View(Matches)
library(dplyr)
View(Comp)
View(Matches)
colnames(shots_goals)
colnames(Matches)
# Crear un nuevo dataset con las columnas seleccionadas
import_dataset <- Matches %>%
select(home_score, match_week, away_score)
# Ver el nuevo dataset
print(import_dataset)
View(FreeCompetitions())
unique(FreeCompetitions()$season_id)
unique(FreeCompetitions()$season_id == 30)
View(FreeCompetitions() %>%
filter(season_name =="2019/2020"))
View(Comp)
View(Matches)
View(StatsBombData)
View(Matches)
View(Matches)
View(Matches)
#FreeMatches()
Matches <- FreeMatches(Comp)#3
View(Matches)
#llamando a las librerias necesarias
library(tidyverse)
library(StatsBombR)#1
#Toda la BBDD gratuita de StatsBomb
View(FreeCompetitions())
#FreeCompetitions()
#Trayendo los datos de la competición
Comp <- FreeCompetitions() %>%
filter(season_name=="2019/2020" & competition_id==37)#2
#FreeMatches()
#Trae los partidos de la competicion elegida
Matches <- FreeMatches(Comp)#3
View(Matches)
getlineupsFree(Comp)
StatsBombData <- free_allevents(MatchesDF = Matches, Parallel = T)#4
free_allevents()
get.matchFree(Matches[1,])
View(Matches)
get.matches(Comp)
View(StatsBombData)
StatsBombData = allclean(StatsBombData)#5
#
StatsBombData <- free_allevents(MatchesDF = Matches, Parallel = T)#4
#FreeCompetitions()
#Trayendo los datos de la competición
Comp <- FreeCompetitions() %>%
filter(season_name=="2019/2020" & competition_id==37)#2
#FreeMatches()
#Trae los partidos de la competicion elegida
Matches <- FreeMatches(Comp)#3
#
StatsBombData <- free_allevents(MatchesDF = Matches, Parallel = T)#4
View(StatsBombData)
StatsBombData = allclean(StatsBombData)#5
View(StatsBombData)
View(shots_goals)
#
shots_goals = StatsBombData %>%
group_by(team.name) %>% #1
summarise(shots = sum(type.name=="Shot", na.rm = TRUE),
goals = sum(shot.outcome.name=="Goal", na.rm = TRUE)) #2
View(shots_goals)
View(StatsBombData.shot.outcome.name)
View(StatsBombData$shot.outcome.name)
#
StatsBombData <- free_allevents(MatchesDF = Matches, Parallel = T)#4
#
StatsBombData <- free_allevents(MatchesDF = Matches, Parallel = T)#4
#FreeMatches()
#Trae los partidos de la competicion elegida
Matches <- FreeMatches(Comp)#3
#
shots_goals = StatsBombData %>%
group_by(team.name) %>% #1
summarise(shots = sum(type.name=="Shot", na.rm = TRUE),
goals = sum(shot.outcome.name=="Goal", na.rm = TRUE)) #2
#llamando a las librerias necesarias
library(tidyverse)
library(StatsBombR)#1
#FreeCompetitions()
#Trayendo los datos de la competición
Comp <- FreeCompetitions() %>%
filter(season_name=="2019/2020" & competition_id==37)#2
#FreeMatches()
#Trae los partidos de la competicion elegida
Matches <- FreeMatches(Comp)#3
#
StatsBombData <- free_allevents(MatchesDF = Matches, Parallel = T)#4
StatsBombData = allclean(StatsBombData)#5
#
shots_goals = StatsBombData %>%
group_by(team.name) %>% #1
summarise(shots = sum(type.name=="Shot", na.rm = TRUE),
goals = sum(shot.outcome.name=="Goal", na.rm = TRUE)) #2
View(StatsBombData$type.name)
StatsBombData$type.name
View(StatsBombData$type.name == "Shot")
View(StatsBombData$type.name == "Shot")
StatsBombData$type.name == "Shot"
View(StatsBombData)
#paquetes a instalar
install.packages("tidyverse")
install.packages("devtools")
#llamando a las librerias necesarias
library(tidyverse)
library(StatsBombR)#1
#desde github
remotes::install_version("SDMTools", "1.1-221")
devtools::install_github("statsbomb/StatsBombR")
#llamando a las librerias necesarias
library(tidyverse)
library(StatsBombR)#1
#Toda la BBDD gratuita de StatsBomb
View(FreeCompetitions())
#FreeCompetitions()
#Trayendo los datos de la competición
Comp <- FreeCompetitions() %>%
filter(competition_id==223 & season_name=="2024")#2
View(Comp)
View(Comp)
Matches <- FreeMatches(Comp)#3
View(Matches)
View(Matches[[20]][[1]])
View(Matches[[20]][[2]])
View(Matches[[20]][[4]])
# Importar dataset en formato CSV
write.csv(Matches,"C:/Users/John/Downloads/Copa_America.csv", row.names = FALSE)
is.list(Matches)
View(Matches[[27]][[1]])
View(Matches[[27]][[1]])
View(Matches[[27]][[2]])
View(Matches[[27]][[3]])
View(Matches[[27]][[10]])
View(Matches[[27]][[9]])
View(Matches[[27]][[8]])
View(Matches[[27]][[1]])
View(Matches[[27]][[1]])
View(Matches[[27]][[1]])
# Extraer los dataframes de la lista
home_managers <- Matches$home_team.managers
away_managers <- Matches$away_team.managers
# Extraer las columnas de interés de home_team.managers
name_home <- home_managers$name
country_home <- home_managers$country.name
# Extraer las columnas de interés de away_team.managers
name_away <- away_managers$name
country_away <- away_managers$country.name
# Mostrar los valores
print(name_home)
print(country_home)
print(name_away)
print(country_away)
# Extraer las columnas de interés de home_team.managers
name_home <- home_managers.name
View(home_managers)
# Inspeccionar el primer elemento de away_managers
str(away_managers[[1]])
View(Matches[[27]][[1]])
# Crear vectores para almacenar los datos
name_away <- character(32)
country_away <- character(32)
name_home <- character(32)
country_home <- character(32)
# Recorrer cada elemento de las listas
for (i in 1:32) {
# Extraer datos de away_managers
name_away[i] <- away_managers[[i]]$name
country_away[i] <- away_managers[[i]]$country.name
# Extraer datos de home_managers
name_home[i] <- home_managers[[i]]$name
country_home[i] <- home_managers[[i]]$country.name
}
# Mostrar los resultados
print(name_away)
print(country_away)
print(name_home)
print(country_home)
# Crear un dataframe con los datos extraídos
managers_info <- data.frame(
name_away = name_away,
country_away = country_away,
name_home = name_home,
country_home = country_home
)
# Mostrar el dataframe
print(managers_info)
View(managers_info)
# Excluir las columnas "id" y "salario"
nuevo_dataset <- Matches %>%
select(-home_team.managers, -away_team.managers)
View(nuevo_dataset)
View(Matches)
View(managers_info)
View(away_managers)
# Importar dataset en formato CSV
write.csv(nuevo_dataset,"C:/Users/John/Downloads/Copa_America.csv", row.names = FALSE)
